// Copyright (C) 2016 Filip Cyrus Bober

using System.Collections.Generic;

namespace FCB.EventSystem
{
    public class SingleEventManager
    {
        private class SingleEvent<T> where T : GameEvent
        {
            public int Id;

            private System.Type _eventType;

            public SingleEvent(int id)
            {
                Id = id;
                _eventType = typeof(T);
            }

            protected bool Equals(SingleEvent<T> other)
            {
                return Id == other.Id && _eventType == other._eventType;
            }

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != this.GetType()) return false;
                return Equals((SingleEvent<T>)obj);
            }

            public override int GetHashCode()
            {
                unchecked { return (Id * 397) ^ _eventType.GetHashCode(); }
            }
        }

        public static SingleEventManager Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new SingleEventManager();
                }

                return _instance;
            }
        }

        private static SingleEventManager _instance = null;

        public delegate void EventDelegate<T>(T e) where T : GameEvent;
        private delegate void EventDelegate(GameEvent e);

        /// <summary>
        /// Key is SingleEvent hash, generated by unique GameObjectId and event type
        /// </summary>
        private Dictionary<int, EventDelegate> delegates = new Dictionary<int, EventDelegate>();

        public void AddListener<T>(int ownerId, EventDelegate<T> eventListener) where T : GameEvent
        {
            int key = new SingleEvent<T>(ownerId).GetHashCode();

            if (delegates.ContainsKey(key))
                return;

            EventDelegate internalDelegate = (e) => eventListener((T)e);
            EventDelegate eventInvoker;
            if (delegates.TryGetValue(key, out eventInvoker))
            {
                eventInvoker += internalDelegate;
                delegates[key] = eventInvoker;
            }
            else
            {
                delegates[key] = internalDelegate;
            }
        }

        public void RemoveListener<T>(int ownerId, EventDelegate<T> eventListener) where T : GameEvent
        {
            int key = new SingleEvent<T>(ownerId).GetHashCode();

            EventDelegate internalDelegate;
            if (delegates.TryGetValue(key, out internalDelegate))
            {
                System.Type eventType = typeof(T);
                EventDelegate eventInvoker;
                if (delegates.TryGetValue(key, out eventInvoker))
                {
                    eventInvoker -= internalDelegate;
                    if (eventInvoker == null)
                    {
                        delegates.Remove(key);
                    }
                    else
                    {
                        delegates[key] = eventInvoker;
                    }
                }
            }
        }

        public void Raise<T>(int ownerId, T e) where T : GameEvent
        {
            System.Type type = e.GetType();
            int key = new SingleEvent<T>(ownerId).GetHashCode();

            EventDelegate eventInvoker;
            if (delegates.TryGetValue(key, out eventInvoker))
            {
                eventInvoker.Invoke(e);
            }
        }

    }
}
